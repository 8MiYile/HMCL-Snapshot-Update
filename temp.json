{"url":"https://api.github.com/repos/HMCL-dev/HMCL/compare/HMCL-dev:HMCL:main...glavo:HMCL:old-version","html_url":"https://github.com/HMCL-dev/HMCL/compare/HMCL-dev:HMCL:main...glavo:HMCL:old-version","permalink_url":"https://github.com/HMCL-dev/HMCL/compare/HMCL-dev:85b68ad...glavo:f6e647c","diff_url":"https://github.com/HMCL-dev/HMCL/compare/HMCL-dev:HMCL:main...glavo:HMCL:old-version.diff","patch_url":"https://github.com/HMCL-dev/HMCL/compare/HMCL-dev:HMCL:main...glavo:HMCL:old-version.patch","base_commit":{"sha":"85b68ad135267bc33e03c3624b1bced9b7804c39","node_id":"C_kwDOAkF0IdoAKDg1YjY4YWQxMzUyNjdiYzMzZTAzYzM2MjRiMWJjZWQ5Yjc4MDRjMzk","commit":{"author":{"name":"Haowei Wen","email":"yushijinhun@gmail.com","date":"2024-06-30T05:19:52Z"},"committer":{"name":"Haowei Wen","email":"yushijinhun@gmail.com","date":"2024-06-30T05:28:49Z"},"message":"Fix findMinecraftRuntimeDirs() is broken on Linux/FreeBSD","tree":{"sha":"48df17e90da5ab9ba164955127708e851f704b2b","url":"https://api.github.com/repos/HMCL-dev/HMCL/git/trees/48df17e90da5ab9ba164955127708e851f704b2b"},"url":"https://api.github.com/repos/HMCL-dev/HMCL/git/commits/85b68ad135267bc33e03c3624b1bced9b7804c39","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/HMCL-dev/HMCL/commits/85b68ad135267bc33e03c3624b1bced9b7804c39","html_url":"https://github.com/HMCL-dev/HMCL/commit/85b68ad135267bc33e03c3624b1bced9b7804c39","comments_url":"https://api.github.com/repos/HMCL-dev/HMCL/commits/85b68ad135267bc33e03c3624b1bced9b7804c39/comments","author":{"login":"yushijinhun","id":8373027,"node_id":"MDQ6VXNlcjgzNzMwMjc=","avatar_url":"https://avatars.githubusercontent.com/u/8373027?v=4","gravatar_id":"","url":"https://api.github.com/users/yushijinhun","html_url":"https://github.com/yushijinhun","followers_url":"https://api.github.com/users/yushijinhun/followers","following_url":"https://api.github.com/users/yushijinhun/following{/other_user}","gists_url":"https://api.github.com/users/yushijinhun/gists{/gist_id}","starred_url":"https://api.github.com/users/yushijinhun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yushijinhun/subscriptions","organizations_url":"https://api.github.com/users/yushijinhun/orgs","repos_url":"https://api.github.com/users/yushijinhun/repos","events_url":"https://api.github.com/users/yushijinhun/events{/privacy}","received_events_url":"https://api.github.com/users/yushijinhun/received_events","type":"User","site_admin":false},"committer":{"login":"yushijinhun","id":8373027,"node_id":"MDQ6VXNlcjgzNzMwMjc=","avatar_url":"https://avatars.githubusercontent.com/u/8373027?v=4","gravatar_id":"","url":"https://api.github.com/users/yushijinhun","html_url":"https://github.com/yushijinhun","followers_url":"https://api.github.com/users/yushijinhun/followers","following_url":"https://api.github.com/users/yushijinhun/following{/other_user}","gists_url":"https://api.github.com/users/yushijinhun/gists{/gist_id}","starred_url":"https://api.github.com/users/yushijinhun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yushijinhun/subscriptions","organizations_url":"https://api.github.com/users/yushijinhun/orgs","repos_url":"https://api.github.com/users/yushijinhun/repos","events_url":"https://api.github.com/users/yushijinhun/events{/privacy}","received_events_url":"https://api.github.com/users/yushijinhun/received_events","type":"User","site_admin":false},"parents":[{"sha":"7d5d74d0c602d3d0654946b80239f41fb643fdd4","url":"https://api.github.com/repos/HMCL-dev/HMCL/commits/7d5d74d0c602d3d0654946b80239f41fb643fdd4","html_url":"https://github.com/HMCL-dev/HMCL/commit/7d5d74d0c602d3d0654946b80239f41fb643fdd4"}]},"merge_base_commit":{"sha":"af3719403d5fc0640ecd902d78d8f952b269fd6d","node_id":"C_kwDOEL2jedoAKGFmMzcxOTQwM2Q1ZmMwNjQwZWNkOTAyZDc4ZDhmOTUyYjI2OWZkNmQ","commit":{"author":{"name":"Burning_TNT","email":"88144530+burningtnt@users.noreply.github.com","date":"2024-05-15T14:24:48Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2024-05-15T14:24:48Z"},"message":"Support #3000: Support neoforge.mods.toml  (#3031)\n\n* Support #3000\r\n\r\n* Fix #2371\r\n\r\n* Rename references.\r\n\r\n* Code cleanup.","tree":{"sha":"5f95e585a4c49fae6266ba84941e9fd137028f65","url":"https://api.github.com/repos/HMCL-dev/HMCL/git/trees/5f95e585a4c49fae6266ba84941e9fd137028f65"},"url":"https://api.github.com/repos/HMCL-dev/HMCL/git/commits/af3719403d5fc0640ecd902d78d8f952b269fd6d","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJmRMWwCRC1aQ7uu5UhlAAA0FUQABBICFPvehKIR9St6f/T1r9Q\nE+7OxzMwMEAIf8PqZ1Kr1ZHweXwFML8B/v0CS9sZm6eOcEYXKOoAv8XiLhIN2g3Q\nOPXDgZQEDQ1SdOsBykAw2sFOdAjgXO+zWK9m+eXE0ueZGRQpLRtwm/Utae5SC6aL\nDoUWu6S3mx8exSWYz8vwE8fQASCxc10ooWFIwdDsgqVXvoLr1R6t1qkio1fdFc0v\nLy35zaCjtQVPMd9kUGO2qmN5Eisfh8tB8gWyOa1iZDQdcgQGVdJKMHh21PhKFS1a\nHtpt6cn89eHz3hzfucLckn7MHFN/tPF9QVsYQcvMrkx+aTT6/jIYFx063dJTuZED\nLxZ56R+hilHECGixeMtGHzFMLoQnPkZ1f02GUpctrh4TtobcIJT7zYAmozy5n05r\n14TeehIfsvIK0OHXgSQpYrCjwU3cOGVAbgzEk85kA+rTaxlHgVOcuqf7usfJcO0o\nD9tS7JfB1u4mSTitB+spUjjHfbMK+HEqYEnDGrAVqZmSZRvUAXzLLMZU+wsJOBrQ\n4wsREfGU1NArUJ/8e13FDOmx7tMfIMxhlHc4B9eXORpyra7gs3Xbcs9EGhlgB7CP\nIrJ4ayKdMI3CN0F6Y9AuCMGgtZ2bGUjS716IHwxJQVw/9fkILcywZ0BPPOLVJqny\naXN7mHF98zcMV6henvad\n=Rcy+\n-----END PGP SIGNATURE-----\n","payload":"tree 5f95e585a4c49fae6266ba84941e9fd137028f65\nparent e0764d6f0ca66fae9b9922d487693c40b9a57212\nauthor Burning_TNT <88144530+burningtnt@users.noreply.github.com> 1715783088 +0800\ncommitter GitHub <noreply@github.com> 1715783088 +0800\n\nSupport #3000: Support neoforge.mods.toml  (#3031)\n\n* Support #3000\r\n\r\n* Fix #2371\r\n\r\n* Rename references.\r\n\r\n* Code cleanup."}},"url":"https://api.github.com/repos/HMCL-dev/HMCL/commits/af3719403d5fc0640ecd902d78d8f952b269fd6d","html_url":"https://github.com/HMCL-dev/HMCL/commit/af3719403d5fc0640ecd902d78d8f952b269fd6d","comments_url":"https://api.github.com/repos/HMCL-dev/HMCL/commits/af3719403d5fc0640ecd902d78d8f952b269fd6d/comments","author":{"login":"burningtnt","id":88144530,"node_id":"MDQ6VXNlcjg4MTQ0NTMw","avatar_url":"https://avatars.githubusercontent.com/u/88144530?v=4","gravatar_id":"","url":"https://api.github.com/users/burningtnt","html_url":"https://github.com/burningtnt","followers_url":"https://api.github.com/users/burningtnt/followers","following_url":"https://api.github.com/users/burningtnt/following{/other_user}","gists_url":"https://api.github.com/users/burningtnt/gists{/gist_id}","starred_url":"https://api.github.com/users/burningtnt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/burningtnt/subscriptions","organizations_url":"https://api.github.com/users/burningtnt/orgs","repos_url":"https://api.github.com/users/burningtnt/repos","events_url":"https://api.github.com/users/burningtnt/events{/privacy}","received_events_url":"https://api.github.com/users/burningtnt/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"e0764d6f0ca66fae9b9922d487693c40b9a57212","url":"https://api.github.com/repos/HMCL-dev/HMCL/commits/e0764d6f0ca66fae9b9922d487693c40b9a57212","html_url":"https://github.com/HMCL-dev/HMCL/commit/e0764d6f0ca66fae9b9922d487693c40b9a57212"}]},"status":"diverged","ahead_by":1,"behind_by":14,"total_commits":1,"commits":[{"sha":"f6e647c9990d0b8705af0adaed1a8ea46841d106","node_id":"C_kwDOAkF0IdoAKGY2ZTY0N2M5OTkwZDBiODcwNWFmMGFkYWVkMWE4ZWE0Njg0MWQxMDY","commit":{"author":{"name":"Glavo","email":"zjx001202@gmail.com","date":"2024-05-19T01:57:37Z"},"committer":{"name":"Glavo","email":"zjx001202@gmail.com","date":"2024-05-19T01:57:37Z"},"message":"Fix #3051: 支持解析更多版本号","tree":{"sha":"23d8c58e3a21227901a9e3ed16e1fede8f560ed8","url":"https://api.github.com/repos/HMCL-dev/HMCL/git/trees/23d8c58e3a21227901a9e3ed16e1fede8f560ed8"},"url":"https://api.github.com/repos/HMCL-dev/HMCL/git/commits/f6e647c9990d0b8705af0adaed1a8ea46841d106","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/HMCL-dev/HMCL/commits/f6e647c9990d0b8705af0adaed1a8ea46841d106","html_url":"https://github.com/HMCL-dev/HMCL/commit/f6e647c9990d0b8705af0adaed1a8ea46841d106","comments_url":"https://api.github.com/repos/HMCL-dev/HMCL/commits/f6e647c9990d0b8705af0adaed1a8ea46841d106/comments","author":{"login":"Glavo","id":20694662,"node_id":"MDQ6VXNlcjIwNjk0NjYy","avatar_url":"https://avatars.githubusercontent.com/u/20694662?v=4","gravatar_id":"","url":"https://api.github.com/users/Glavo","html_url":"https://github.com/Glavo","followers_url":"https://api.github.com/users/Glavo/followers","following_url":"https://api.github.com/users/Glavo/following{/other_user}","gists_url":"https://api.github.com/users/Glavo/gists{/gist_id}","starred_url":"https://api.github.com/users/Glavo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Glavo/subscriptions","organizations_url":"https://api.github.com/users/Glavo/orgs","repos_url":"https://api.github.com/users/Glavo/repos","events_url":"https://api.github.com/users/Glavo/events{/privacy}","received_events_url":"https://api.github.com/users/Glavo/received_events","type":"User","site_admin":false},"committer":{"login":"Glavo","id":20694662,"node_id":"MDQ6VXNlcjIwNjk0NjYy","avatar_url":"https://avatars.githubusercontent.com/u/20694662?v=4","gravatar_id":"","url":"https://api.github.com/users/Glavo","html_url":"https://github.com/Glavo","followers_url":"https://api.github.com/users/Glavo/followers","following_url":"https://api.github.com/users/Glavo/following{/other_user}","gists_url":"https://api.github.com/users/Glavo/gists{/gist_id}","starred_url":"https://api.github.com/users/Glavo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Glavo/subscriptions","organizations_url":"https://api.github.com/users/Glavo/orgs","repos_url":"https://api.github.com/users/Glavo/repos","events_url":"https://api.github.com/users/Glavo/events{/privacy}","received_events_url":"https://api.github.com/users/Glavo/received_events","type":"User","site_admin":false},"parents":[{"sha":"af3719403d5fc0640ecd902d78d8f952b269fd6d","url":"https://api.github.com/repos/HMCL-dev/HMCL/commits/af3719403d5fc0640ecd902d78d8f952b269fd6d","html_url":"https://github.com/HMCL-dev/HMCL/commit/af3719403d5fc0640ecd902d78d8f952b269fd6d"}]}],"files":[{"sha":"55e751623e43da716ca48c13314e9af03c7c3092","filename":"HMCLCore/src/main/java/org/jackhuang/hmcl/util/versioning/GameVersionNumber.java","status":"modified","additions":34,"deletions":90,"changes":124,"blob_url":"https://github.com/HMCL-dev/HMCL/blob/f6e647c9990d0b8705af0adaed1a8ea46841d106/HMCLCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fjackhuang%2Fhmcl%2Futil%2Fversioning%2FGameVersionNumber.java","raw_url":"https://github.com/HMCL-dev/HMCL/raw/f6e647c9990d0b8705af0adaed1a8ea46841d106/HMCLCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fjackhuang%2Fhmcl%2Futil%2Fversioning%2FGameVersionNumber.java","contents_url":"https://api.github.com/repos/HMCL-dev/HMCL/contents/HMCLCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fjackhuang%2Fhmcl%2Futil%2Fversioning%2FGameVersionNumber.java?ref=f6e647c9990d0b8705af0adaed1a8ea46841d106","patch":"@@ -10,6 +10,9 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+/**\n+ * @author Glavo\n+ */\n public abstract class GameVersionNumber implements Comparable<GameVersionNumber> {\n \n     public static String[] getDefaultGameVersions() {\n@@ -22,11 +25,10 @@ public static GameVersionNumber asGameVersion(String version) {\n                 char ch = version.charAt(0);\n                 switch (ch) {\n                     case 'r':\n-                        return Old.parsePreClassic(version);\n                     case 'a':\n                     case 'b':\n                     case 'c':\n-                        return Old.parseAlphaBetaClassic(version);\n+                        return Old.parse(version);\n                     case 'i':\n                         return Old.parseInfdev(version);\n                 }\n@@ -110,27 +112,18 @@ public String toString() {\n     }\n \n     static final class Old extends GameVersionNumber {\n-\n-        private static final Pattern PATTERN = Pattern.compile(\"[abc](?<major>[0-9]+)\\\\.(?<minor>[0-9]+)(\\\\.(?<patch>[0-9]+))?([^0-9]*(?<additional>[0-9]+).*)?\");\n-\n-        static Old parsePreClassic(String value) {\n-            int version;\n-            try {\n-                version = Integer.parseInt(value.substring(\"rd-\".length()));\n-            } catch (NumberFormatException e) {\n-                throw new IllegalArgumentException(e);\n-            }\n-            return new Old(value, Type.PRE_CLASSIC, version, 0, 0, 0);\n-        }\n-\n-        static Old parseAlphaBetaClassic(String value) {\n-            Matcher matcher = PATTERN.matcher(value);\n-            if (!matcher.matches()) {\n-                throw new IllegalArgumentException(value);\n-            }\n-\n+        static Old parse(String value) {\n             Type type;\n+            int prefixLength = 1;\n             switch (value.charAt(0)) {\n+                case 'r':\n+                    if (!value.startsWith(\"rd-\")) {\n+                        throw new IllegalArgumentException(value);\n+                    }\n+\n+                    type = Type.PRE_CLASSIC;\n+                    prefixLength = \"rd-\".length();\n+                    break;\n                 case 'a':\n                     type = Type.ALPHA;\n                     break;\n@@ -141,60 +134,27 @@ static Old parseAlphaBetaClassic(String value) {\n                     type = Type.CLASSIC;\n                     break;\n                 default:\n-                    throw new AssertionError(value);\n+                    throw new IllegalArgumentException(value);\n             }\n \n-            int major = Integer.parseInt(matcher.group(\"major\"));\n-            int minor = Integer.parseInt(matcher.group(\"minor\"));\n-\n-            String patchString = matcher.group(\"patch\");\n-            int patch = patchString != null ? Integer.parseInt(patchString) : 0;\n-\n-            String additionalString = matcher.group(\"additional\");\n-            int additional = additionalString != null ? Integer.parseInt(additionalString) : 0;\n+            if (value.length() < prefixLength + 1 || !Character.isDigit(value.charAt(prefixLength))) {\n+                throw new IllegalArgumentException(value);\n+            }\n \n-            return new Old(value, type, major, minor, patch, additional);\n+            return new Old(value, type, VersionNumber.asVersion(value.substring(prefixLength)));\n         }\n \n         static Old parseInfdev(String value) {\n-            String version = value.substring(\"inf-\".length());\n-            int major;\n-            int patch;\n-\n-            try {\n-                major = Integer.parseInt(version);\n-                patch = 0;\n-            } catch (NumberFormatException e) {\n-                int idx = version.indexOf('-');\n-                if (idx >= 0) {\n-                    try {\n-                        major = Integer.parseInt(version.substring(0, idx));\n-                        patch = Integer.parseInt(version.substring(idx + 1));\n-                    } catch (NumberFormatException ignore) {\n-                        throw new IllegalArgumentException(value);\n-                    }\n-                } else {\n-                    throw new IllegalArgumentException(value);\n-                }\n-            }\n-\n-            return new Old(value, Type.INFDEV, major, 0, patch, 0);\n+            return new Old(value, Type.INFDEV, VersionNumber.asVersion(value.substring(\"inf-\".length())));\n         }\n \n-\n         final Type type;\n-        final int major;\n-        final int minor;\n-        final int patch;\n-        final int additional;\n+        final VersionNumber versionNumber;\n \n-        private Old(String value, Type type, int major, int minor, int patch, int additional) {\n+        private Old(String value, Type type, VersionNumber versionNumber) {\n             super(value);\n             this.type = type;\n-            this.major = major;\n-            this.minor = minor;\n-            this.patch = patch;\n-            this.additional = additional;\n+            this.versionNumber = versionNumber;\n         }\n \n         @Override\n@@ -204,42 +164,26 @@ Type getType() {\n \n         @Override\n         int compareToImpl(@NotNull GameVersionNumber other) {\n-            Old that = (Old) other;\n-            int c = Integer.compare(this.major, that.major);\n-            if (c != 0) {\n-                return c;\n-            }\n-\n-            c = Integer.compare(this.minor, that.minor);\n-            if (c != 0) {\n-                return c;\n-            }\n-\n-            c = Integer.compare(this.patch, that.patch);\n-            if (c != 0) {\n-                return c;\n-            }\n-\n-            return Integer.compare(this.additional, that.additional);\n+            return this.versionNumber.compareTo(((Old) other).versionNumber);\n         }\n \n         @Override\n         public boolean equals(Object o) {\n             if (this == o) return true;\n-            if (o == null || getClass() != o.getClass()) return false;\n+            if (!(o instanceof Old)) return false;\n             Old other = (Old) o;\n-            return major == other.major && minor == other.minor && patch == other.patch && additional == other.additional && type == other.type;\n+            return type == other.type && this.versionNumber.compareTo(other.versionNumber) == 0;\n         }\n \n         @Override\n         public int hashCode() {\n-            return Objects.hash(type, major, minor, patch, additional);\n+            return Objects.hash(type, versionNumber.hashCode());\n         }\n     }\n \n     static final class Release extends GameVersionNumber {\n \n-        private static final Pattern PATTERN = Pattern.compile(\"1\\\\.(?<minor>[0-9]+)(\\\\.(?<patch>[0-9]+))?((?<eaType>(-[a-zA-Z]+| Pre-Release ))(?<eaVersion>[0-9]+))?\");\n+        private static final Pattern PATTERN = Pattern.compile(\"1\\\\.(?<minor>[0-9]+)(\\\\.(?<patch>[0-9]+))?((?<eaType>(-[a-zA-Z]+| Pre-Release ))(?<eaVersion>.+))?\");\n \n         static final int TYPE_GA = Integer.MAX_VALUE;\n \n@@ -248,7 +192,7 @@ static final class Release extends GameVersionNumber {\n         static final int TYPE_PRE = 2;\n         static final int TYPE_RC = 3;\n \n-        static final Release ZERO = new Release(\"0.0\", 0, 0, 0, TYPE_GA, 0);\n+        static final Release ZERO = new Release(\"0.0\", 0, 0, 0, TYPE_GA, VersionNumber.ZERO);\n \n         static Release parse(String value) {\n             Matcher matcher = PATTERN.matcher(value);\n@@ -276,7 +220,7 @@ static Release parse(String value) {\n             }\n \n             String eaVersionString = matcher.group(\"eaVersion\");\n-            int eaVersion = eaVersionString == null ? 0 : Integer.parseInt(eaVersionString);\n+            VersionNumber eaVersion = eaVersionString != null ? VersionNumber.asVersion(eaVersionString) : VersionNumber.ZERO;\n \n             return new Release(value, 1, minor, patch, eaType, eaVersion);\n         }\n@@ -286,9 +230,9 @@ static Release parse(String value) {\n         private final int patch;\n \n         private final int eaType;\n-        private final int eaVersion;\n+        private final VersionNumber eaVersion;\n \n-        Release(String value, int major, int minor, int patch, int eaType, int eaVersion) {\n+        Release(String value, int major, int minor, int patch, int eaType, VersionNumber eaVersion) {\n             super(value);\n             this.major = major;\n             this.minor = minor;\n@@ -323,7 +267,7 @@ int compareToRelease(Release other) {\n                 return c;\n             }\n \n-            return Integer.compare(this.eaVersion, other.eaVersion);\n+            return this.eaVersion.compareTo(other.eaVersion);\n         }\n \n         int compareToSnapshot(Snapshot other) {\n@@ -367,7 +311,7 @@ public boolean equals(Object o) {\n             if (this == o) return true;\n             if (o == null || getClass() != o.getClass()) return false;\n             Release other = (Release) o;\n-            return major == other.major && minor == other.minor && patch == other.patch && eaType == other.eaType && eaVersion == other.eaVersion;\n+            return major == other.major && minor == other.minor && patch == other.patch && eaType == other.eaType && eaVersion.equals(other.eaVersion);\n         }\n     }\n "},{"sha":"0753d02505c86df93f16cf6a2035e627c0c89192","filename":"HMCLCore/src/main/java/org/jackhuang/hmcl/util/versioning/VersionNumber.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/HMCL-dev/HMCL/blob/f6e647c9990d0b8705af0adaed1a8ea46841d106/HMCLCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fjackhuang%2Fhmcl%2Futil%2Fversioning%2FVersionNumber.java","raw_url":"https://github.com/HMCL-dev/HMCL/raw/f6e647c9990d0b8705af0adaed1a8ea46841d106/HMCLCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fjackhuang%2Fhmcl%2Futil%2Fversioning%2FVersionNumber.java","contents_url":"https://api.github.com/repos/HMCL-dev/HMCL/contents/HMCLCore%2Fsrc%2Fmain%2Fjava%2Forg%2Fjackhuang%2Fhmcl%2Futil%2Fversioning%2FVersionNumber.java?ref=f6e647c9990d0b8705af0adaed1a8ea46841d106","patch":"@@ -33,6 +33,8 @@\n  */\n public final class VersionNumber implements Comparable<VersionNumber> {\n \n+    public static final VersionNumber ZERO = asVersion(\"0\");\n+\n     public static VersionNumber asVersion(String version) {\n         Objects.requireNonNull(version);\n         return new VersionNumber(version);"},{"sha":"e660fbd048e25c79916fb1662aa950fd2c42f2fa","filename":"HMCLCore/src/test/java/org/jackhuang/hmcl/util/versioning/GameVersionNumberTest.java","status":"modified","additions":17,"deletions":10,"changes":27,"blob_url":"https://github.com/HMCL-dev/HMCL/blob/f6e647c9990d0b8705af0adaed1a8ea46841d106/HMCLCore%2Fsrc%2Ftest%2Fjava%2Forg%2Fjackhuang%2Fhmcl%2Futil%2Fversioning%2FGameVersionNumberTest.java","raw_url":"https://github.com/HMCL-dev/HMCL/raw/f6e647c9990d0b8705af0adaed1a8ea46841d106/HMCLCore%2Fsrc%2Ftest%2Fjava%2Forg%2Fjackhuang%2Fhmcl%2Futil%2Fversioning%2FGameVersionNumberTest.java","contents_url":"https://api.github.com/repos/HMCL-dev/HMCL/contents/HMCLCore%2Fsrc%2Ftest%2Fjava%2Forg%2Fjackhuang%2Fhmcl%2Futil%2Fversioning%2FGameVersionNumberTest.java?ref=f6e647c9990d0b8705af0adaed1a8ea46841d106","patch":"@@ -48,6 +48,10 @@ private static void assertLessThan(String version1, String version2) {\n         assertTrue(GameVersionNumber.asGameVersion(version1).compareTo(version2) < 0, errorMessage(version1, version2));\n     }\n \n+    private static String toString(GameVersionNumber gameVersionNumber) {\n+        return gameVersionNumber.getClass().getSimpleName();\n+    }\n+\n     private static void assertOrder(String... versions) {\n         for (int i = 0; i < versions.length - 1; i++) {\n             GameVersionNumber version1 = GameVersionNumber.asGameVersion(versions[i]);\n@@ -58,8 +62,8 @@ private static void assertOrder(String... versions) {\n             for (int j = i + 1; j < versions.length; j++) {\n                 GameVersionNumber version2 = GameVersionNumber.asGameVersion(versions[j]);\n \n-                assertEquals(-1, version1.compareTo(version2), String.format(\"version1=%s, version2=%s\", versions[i], versions[j]));\n-                assertEquals(1, version2.compareTo(version1), String.format(\"version1=%s, version2=%s\", versions[i], versions[j]));\n+                assertEquals(-1, version1.compareTo(version2), String.format(\"version1=%s (%s), version2=%s (%s)\", versions[i], toString(version1), versions[j], toString(version2)));\n+                assertEquals(1, version2.compareTo(version1), String.format(\"version1=%s (%s), version2=%s (%s)\", versions[i], toString(version1), versions[j], toString(version2)));\n             }\n         }\n \n@@ -73,21 +77,15 @@ public void testParseOld() {\n             assertInstanceOf(GameVersionNumber.Old.class, version);\n             GameVersionNumber.Old old = (GameVersionNumber.Old) version;\n             assertEquals(GameVersionNumber.Type.BETA, old.type);\n-            assertEquals(1, old.major);\n-            assertEquals(0, old.minor);\n-            assertEquals(0, old.patch);\n-            assertEquals(0, old.additional);\n+            assertEquals(VersionNumber.asVersion(\"1.0\"), old.versionNumber);\n         }\n \n         {\n             GameVersionNumber version = GameVersionNumber.asGameVersion(\"b1.0_01\");\n             assertInstanceOf(GameVersionNumber.Old.class, version);\n             GameVersionNumber.Old old = (GameVersionNumber.Old) version;\n             assertEquals(GameVersionNumber.Type.BETA, old.type);\n-            assertEquals(1, old.major);\n-            assertEquals(0, old.minor);\n-            assertEquals(0, old.patch);\n-            assertEquals(1, old.additional);\n+            assertEquals(VersionNumber.asVersion(\"1.0_01\"), old.versionNumber);\n         }\n     }\n \n@@ -138,15 +136,24 @@ public void testCompareMix() {\n                 \"inf-20100330-2\",\n                 \"inf-20100618\",\n                 \"a1.0.4\",\n+                \"a1.0.8_01\",\n+                \"a1.0.10\",\n+                \"a1.0.13_01-1\",\n                 \"a1.0.17_02\",\n                 \"a1.0.17_04\",\n                 \"a1.1.0\",\n+                \"a1.1.1\",\n                 \"b1.0\",\n                 \"b1.0_01\",\n                 \"b1.1_02\",\n                 \"b1.2\",\n+                \"b1.8-pre1-2\",\n                 \"b1.8.1\",\n                 \"0.0\",\n+                \"1.0.0-rc1\",\n+                \"1.0.0-rc2-1\",\n+                \"1.0.0-rc2-2\",\n+                \"1.0.0-rc2-3\",\n                 \"1.0\",\n                 \"11w47a\",\n                 \"1.1\","}]}